import React, { useState, useEffect } from 'react';

// Reusable ItemList Component
// This component is responsible for rendering a list of items.
// It receives 'items' as a prop and maps over them to display.
const ItemList = ({ items }) => {
  // Check if items array is empty or null/undefined
  if (!items || items.length === 0) {
    return <p className="text-gray-600 text-lg">No items to display.</p>;
  }

  return (
    <ul className="space-y-4">
      {items.map(item => (
        <li
          key={item.id} // Use a unique key for each list item
          className="bg-blue-100 p-4 rounded-lg shadow-md hover:shadow-lg transition-shadow duration-300"
        >
          <h3 className="text-xl font-semibold text-blue-800 mb-1">{item.title}</h3>
          <p className="text-gray-700">{item.body}</p>
        </li>
      ))}
    </ul>
  );
};

// Main App Component
// This component handles data fetching, state management (loading, error, data),
// and renders the ItemList component.
const App = () => {
  // State to store the fetched data
  const [data, setData] = useState([]);
  // State to manage the loading status
  const [isLoading, setIsLoading] = useState(true);
  // State to manage any error that occurs during fetching
  const [error, setError] = useState(null);

  // useEffect hook to perform side effects, in this case, data fetching.
  // The empty dependency array `[]` ensures this effect runs only once after the initial render.
  useEffect(() => {
    const fetchData = async () => {
      try {
        // Set loading to true before starting the fetch operation
        setIsLoading(true);
        // Clear any previous errors
        setError(null);

        // Fetch data from JSONPlaceholder API (posts endpoint)
        const response = await fetch('https://jsonplaceholder.typicode.com/posts');

        // Check if the response is OK (status code 200-299)
        if (!response.ok) {
          // If not OK, throw an error with the status text
          throw new Error(`HTTP error! status: ${response.status}`);
        }

        // Parse the JSON response
        const result = await response.json();
        // Update the data state with the fetched result
        setData(result);
      } catch (err) {
        // Catch any errors during the fetch or parsing process
        setError(err.message); // Set the error message
      } finally {
        // Set loading to false once the fetch operation is complete (whether success or error)
        setIsLoading(false);
      }
    };

    fetchData(); // Call the async function to fetch data
  }, []); // Empty dependency array means this runs once on mount

  return (
    <div className="min-h-screen bg-gradient-to-br from-purple-400 to-indigo-600 flex items-center justify-center p-6 font-sans">
      <div className="bg-white p-8 rounded-2xl shadow-2xl max-w-2xl w-full text-center transform transition-all duration-300 hover:scale-[1.01]">
        <h1 className="text-4xl font-extrabold text-gray-800 mb-8">
          API Data Fetcher
        </h1>

        {/* Conditional rendering based on loading, error, and data states */}
        {isLoading && (
          <div className="flex items-center justify-center text-xl text-indigo-700">
            <svg className="animate-spin -ml-1 mr-3 h-8 w-8 text-indigo-700" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
              <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle>
              <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
            </svg>
            Loading items...
          </div>
        )}

        {error && (
          <div className="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded relative" role="alert">
            <strong className="font-bold">Error!</strong>
            <span className="block sm:inline"> {error}</span>
            <p className="text-sm mt-2">Please check your network connection or the API endpoint.</p>
          </div>
        )}

        {/* Render ItemList only when not loading and no error */}
        {!isLoading && !error && (
          <ItemList items={data} />
        )}
      </div>
    </div>
  );
};

export default App;
